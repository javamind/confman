import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    ext {
        flywayVersion = '3.0'
        oracleDriverVersion = '11.2.0.4'
        postgresqlDriverVersion = '9.3-1102-jdbc41'
        springBootVersion = '1.2.0.M1'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven{
            url 'http://repo.spring.io/libs-snapshot'
        }
    }
    dependencies {
        classpath "org.postgresql:postgresql:${postgresqlDriverVersion}"
        classpath "org.flywaydb:flyway-gradle-plugin:${flywayVersion}"
        //classpath 'com.oracle:ojdbc6:${oracleDriverVersion}'
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'flyway'
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'war'


group = 'com.ninjamind'
version = '1.0.0-SNAPSHOT'

ext {
    flywayVersion = '3.0'
    oracleDriverVersion = '11.2.0.4'
    postgresqlDriverVersion = '9.3-1102-jdbc41'
    javaVersion = '1.8'
}

compileJava {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'http://repo.spring.io/plugins-release'
    }
}

idea {
    module {
        inheritOutputDirs = true
    }
}

dependencies {
    compile project(':client')
    compile("com.google.guava:guava:16.0.1")
    compile("com.oracle:ojdbc6:${oracleDriverVersion}")
    compile("org.postgresql:postgresql:${postgresqlDriverVersion}")
    compile("com.github.zafarkhaja:java-semver:0.7.2")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    //compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")

    testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
    testCompile("com.ninja-squad:DbSetup:1.3.0")
    testCompile("org.assertj:assertj-core:1.5.0")
    testCompile("org.mockito:mockito-all:1.8.5")
    testCompile("junit:junit:4.11")
}

//You can change the default database which is postgreSQL
String myDataBase = "postgresql"
if (project.properties.containsKey("database")) {
    myDataBase = project.property("database")
}
processResources {
    println "The database used is " + myDataBase
    filter ReplaceTokens, tokens: [
            "db.driver"         : project.property("db." + myDataBase + ".driver"),
            "db.url"            : project.property("db." + myDataBase + ".url"),
            "db.username"       : project.property("db." + myDataBase + ".username"),
            "db.password"       : project.property("db." + myDataBase + ".password"),
            "db.supressclose"   : project.property("db." + myDataBase + ".supressclose"),
            "hibernate.dialect" : project.property("db." + myDataBase + ".hibernate.dialect"),
            "hibernate.show_sql": project.property("db." + myDataBase + ".hibernate.show_sql"),
    ]
}

//flyway
project.ext['flyway.user'] = project.property("db." + myDataBase + ".username")
project.ext['flyway.password'] = project.property("db." + myDataBase + ".password")
if (project.properties.containsKey("flyway.schemas") && !project.properties.containsKey("flyway.schemas").equals("")) {
    project.ext['flyway.schemas'] = project.property("db." + myDataBase + ".schemas")
}
project.ext['flyway.url'] = project.property("db." + myDataBase + ".url")
project.ext['flyway.locations'] = "db.migration." + myDataBase

//Artifact and release build.
war {
    baseName = 'confman'
    version = ''
    exclude('**/db/**')
    exclude('*.properties')
}

//Create file conf for flyway
task createConfFliwayForDelivery << {
    //Create the flyway property file
    def props = new Properties()
    props.setProperty('flyway.user', project.property("db." + myDataBase + ".username"))
    props.setProperty('flyway.password', project.property("db." + myDataBase + ".password"))
    if (project.properties.containsKey("flyway.schemas") && !project.properties.containsKey("flyway.schemas").equals("")) {
        props.setProperty('flyway.schemas', project.property("db." + myDataBase + ".schemas"))
    }
    props.setProperty('flyway.url', project.property("db." + myDataBase + ".url"))
    new File("$buildDir/delivery/database/conf").mkdirs()
    new File("$buildDir/delivery/database/conf/flyway.properties").withWriter {
        fileWriter -> props.each { key, value -> fileWriter.writeLine "$key=$value" }
    }
}
//Several files and directories have to be present in the delivery directory
task copyForDelivery(dependsOn: createConfFliwayForDelivery) << {
    //the war
    copy {
        from "$buildDir/libs/confman.war"
        into { "$buildDir/delivery" }
    }
    //Flyway copmmand line
    copy {
        into "$buildDir/delivery/database"
        from "src/main/database"
    }
    //Database script
    copy {
        into "$buildDir/delivery/database/sql"
        from "src/main/resources/db/migration/" + myDataBase
    }
    //Driver jdbc
    copy {
        into "$buildDir/delivery/database/jars"
        if (myDataBase.equals("oracle")) {
            from configurations.runtime
            include '**/ojdbc6*.jar'
        } else {
            from configurations.runtime
            include '**/postgresql*.jar'
        }
    }
    //... and the properties
    copy {
        into "$buildDir/delivery/config"
        from "$buildDir/resources/main"
        include '*.properties'
    }
}

//We have to make the job before the jar completude
assemble.dependsOn copyForDelivery
