import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath 'org.postgresql:postgresql:9.3-1102-jdbc41'
        classpath 'org.flywaydb:flyway-gradle-plugin:3.0'
        classpath 'com.oracle:ojdbc6:11.2.0.4'
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'flyway'
apply plugin: 'sonar'

version = '1.0.0-SNAPSHOT'
compileJava {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    compile group: 'net.code-story', name: 'http', version: '1.50'
    compile group: 'org.webjars', name: 'bootstrap', version: '3.1.1'
    compile group: 'org.webjars', name: 'angularjs', version: '1.3.0-rc.0'
    compile group: 'org.webjars', name: 'angular-ui-bootstrap', version: '0.11.0-2'
    compile group: 'org.webjars', name: 'jquery', version: '2.1.1'
    compile group: 'org.postgresql', name: 'postgresql', version: '9.3-1102-jdbc41'
    compile group: 'com.oracle', name: 'ojdbc6', version: '11.2.0.4'
    compile group: 'com.google.guava', name: 'guava', version: '16.0.1'
    compile group: 'com.github.zafarkhaja', name: 'java-semver', version: '0.7.2'

    compile group: 'org.springframework', name: 'spring-context', version: '4.0.5.RELEASE'
    compile group: 'org.springframework', name: 'spring-jdbc', version: '4.0.5.RELEASE'
    compile group: 'org.springframework.data', name: 'spring-data-jpa', version: '1.6.1.RELEASE'
    testCompile group: 'org.springframework', name: 'spring-test', version: '4.0.5.RELEASE'

    compile group: 'org.hibernate', name: 'hibernate-core', version: '4.3.5.Final'
    compile group: 'org.hibernate', name: 'hibernate-entitymanager', version: '4.3.5.Final'

    testCompile group: 'org.assertj', name: 'assertj-core', version: '1.5.0'
    testCompile group: 'org.mockito', name: 'mockito-all', version: '1.8.5'
    testCompile group: 'junit', name: 'junit', version: '4.11'
    testCompile group: 'com.ninja-squad', name: 'DbSetup', version: '1.3.0'
}

//You can change the default database which is postgreSQL
String myDataBase = "postgresql"
if (project.properties.containsKey("database")) {
    myDataBase = project.property("database")
}
processResources {
    println "The database used is " + myDataBase
    filter ReplaceTokens, tokens: [
            "db.driver"         : project.property("db." + myDataBase + ".driver"),
            "db.url"            : project.property("db." + myDataBase + ".url"),
            "db.username"       : project.property("db." + myDataBase + ".username"),
            "db.password"       : project.property("db." + myDataBase + ".password"),
            "db.supressclose"   : project.property("db." + myDataBase + ".supressclose"),
            "hibernate.dialect" : project.property("db." + myDataBase + ".hibernate.dialect"),
            "hibernate.show_sql": project.property("db." + myDataBase + ".hibernate.show_sql"),
    ]
}

//local sonar
sonar {
    server {
        url = "http://localhost:9000"
    }
    database {
        url = "jdbc:mysql://localhost:3306/sonar?useUnicode=true&characterEncoding=utf8"
        driverClassName = "com.mysql.jdbc.Driver"
        username = "sonar"
        password = "sonar"
    }
}

//flyway
project.ext['flyway.user'] = project.property("db." + myDataBase + ".username")
project.ext['flyway.password'] = project.property("db." + myDataBase + ".password")
if (project.properties.containsKey("flyway.schemas") && !project.properties.containsKey("flyway.schemas").equals("")) {
    project.ext['flyway.schemas'] = project.property("db." + myDataBase + ".schemas")
}
project.ext['flyway.url'] = project.property("db." + myDataBase + ".url")
project.ext['flyway.locations'] = "db.migration." + myDataBase


task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

//Artifact and release build.
//We have to define classpath
jar {
    baseName = 'conf-manager'
    manifest {
        attributes(
                "Manifest-Version" : "1.0",
                "Confman-version" : version,
                "Main-Class" : "com.ninjamind.confman.ConfmanApplication",
                "Class-Path" : configurations.runtime.files.collect { 'dependencies/' + it.name }.join(' ') + ' . '
        )
    }
    //We want a jar without any version in the name
    version=''
    exclude '**/*.properties'
}

//Several files and directories have to be present in the delivery directory
task copyForDelivery << {
    //The dependencies must be present
    copy  {
        into "$buildDir/libs/dependencies"
        from configurations.runtime
    }
    //... and the webapp too
    copy{
        into "$buildDir/libs/app"
        from "app"
    }
    //... and the properties
    copy {
        into "$buildDir/libs"
        from "$buildDir/resources/main"
        include '*.properties'
    }
    //Flyway copmmand line
    copy {
        into "$buildDir/libs/database"
        from "src/main/database"
    }
    //Database script
    copy {
        into "$buildDir/libs/database/sql"
        from "src/main/resources/db/migration/" + myDataBase
    }
    //Driver jdbc
    copy {
        into "$buildDir/libs/database/jars"
        if (myDataBase.equals("oracle")) {
            from configurations.runtime
            include '**/ojdbc6*.jar'
        }
        else{
            from configurations.runtime
            include '**/postgresql*.jar'
        }
    }
    //Create the flyway property file
    def props = new Properties()
    props.setProperty('flyway.user', project.property("db." + myDataBase + ".username"))
    props.setProperty('flyway.password', project.property("db." + myDataBase + ".password"))
    if (project.properties.containsKey("flyway.schemas") && !project.properties.containsKey("flyway.schemas").equals("")) {
        props.setProperty('flyway.schemas', project.property("db." + myDataBase + ".schemas"))
    }
    props.setProperty('flyway.url', project.property("db." + myDataBase + ".url"))
    new File("$buildDir/libs/database/conf/flyway.properties").withWriter {
        fileWriter -> props.each { key, value -> fileWriter.writeLine "$key=$value" }
    }
}

//We have to make the job before the jar completude
jar.dependsOn copyForDelivery
